# look for Program Files 3cx installation
$locations = @()
if (test-path "C:\Program Files\3CXDesktopApp\3CXDesktopApp.exe"){
	$locations += "C:\Program Files\3CXDesktopApp\3CXDesktopApp.exe"
}
if (test-path "C:\Program Files\3CXDesktopApp\Update.exe"){
	$locations += "C:\Program Files\3CXDesktopApp\Update.exe"
}

$badHash = @(
	"a60a61bf844bc181d4540c9fac53203250a982e7c3ad6153869f01e19cc36203",
	"5d99efa36f34aa6b43cd81e77544961c5c8d692c96059fef92c2df2624550734",
	"54004dfaa48ca5fa91e3304fb99559a2395301c570026450882d6aad89132a02",
	"d45674f941be3cca2fbc1af42778043cc18cd86d95a2ecb9e6f0e212ed4c74ae"
	)

# recurse the user folders for 3cx
$users = Get-ChildItem "c:\users\"
foreach ($user in $users) {
	if ($user.name -ne "Public") {
		if (test-path "C:\users\$($user.name)\AppData\Local\Programs\3CXDesktopApp\3CXDesktopApp.exe"){
			$locations += "C:\users\$($user.name)\AppData\Local\Programs\3CXDesktopApp\3CXDesktopApp.exe"
		}
		if (test-path "C:\users\$($user.name)\AppData\Local\Programs\3CXDesktopApp\Update.exe"){
			$locations += "C:\users\$($user.name)\AppData\Local\Programs\3CXDesktopApp\Update.exe"
		}
	}
}

# now with all the locations stored we can start comparing them to the known bad hash
foreach ($location in $locations) {
	if ($badHash -contains (Get-FileHash $location).Hash){
		Write-Output "Bad hash found at $($location)"
		Write-Output $env:computername
		Write-Output $(ipconfig)
	}
}